namespace GraphQL.NewtonsoftJson
{
    public class ExecutionResultJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public ExecutionResultJsonConverter(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public override bool CanRead { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<Newtonsoft.Json.JsonSerializerSettings>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<Newtonsoft.Json.JsonSerializerSettings, System.IServiceProvider>? action) { }
    }
    public class GraphQLContractResolver : Newtonsoft.Json.Serialization.DefaultContractResolver
    {
        public GraphQLContractResolver(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        protected override Newtonsoft.Json.Serialization.JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization) { }
        protected override Newtonsoft.Json.JsonConverter ResolveContractConverter(System.Type objectType) { }
    }
    public class GraphQLRequestJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public GraphQLRequestJsonConverter() { }
        public override bool CanRead { get; }
        public override bool CanWrite { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public class GraphQLRequestListJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public GraphQLRequestListJsonConverter() { }
        public override bool CanRead { get; }
        public override bool CanWrite { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public class GraphQLSerializer : GraphQL.IGraphQLSerializer, GraphQL.IGraphQLTextSerializer
    {
        public GraphQLSerializer() { }
        public GraphQLSerializer(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public GraphQLSerializer(Newtonsoft.Json.JsonSerializerSettings serializerSettings) { }
        public GraphQLSerializer(System.Action<Newtonsoft.Json.JsonSerializerSettings> configureSerializerSettings) { }
        public GraphQLSerializer(bool indent) { }
        public GraphQLSerializer(Newtonsoft.Json.JsonSerializerSettings serializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public GraphQLSerializer(System.Action<Newtonsoft.Json.JsonSerializerSettings> configureSerializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public GraphQLSerializer(bool indent, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public T Read<T>(System.IO.TextReader json) { }
        public T Read<T>(string json) { }
        public System.Threading.Tasks.ValueTask<T> ReadAsync<T>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }
        public T ReadNode<T>(Newtonsoft.Json.Linq.JObject jObject) { }
        public string Write<T>(T value) { }
        public void Write<T>(System.IO.TextWriter textWriter, T value) { }
        public System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T value, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class InputsJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public InputsJsonConverter() { }
        public override bool CanWrite { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public static class SchemaExtensions
    {
        [System.Obsolete]
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public class WebSocketMessageJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public WebSocketMessageJsonConverter() { }
        public override bool CanRead { get; }
        public override bool CanWrite { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
}
